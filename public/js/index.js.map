{"version":3,"file":"js/index.js","mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;;;;;AC5BD;AACA;AACA;AACA;AACA,iBAAiB,KAAK,IAAI,KAAK,IAAI,QAAQ;AAC3C;AACA;AACA;AACA;AACA;AACA,iEAAe,oBAAoB,EAAC;;;;;;;;;;;;;;;;ACVpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,qBAAqB;;;;;;;;;;;;;;;ACVpC;AACA;AACA;AACA,uCAAuC,iBAAiB;AACxD;AACA;AACA;AACA;AACA;AACA,4CAA4C,SAAS;AACrD;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,SAAS;AAChD;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,SAAS;AAChD;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,SAAS;AACrD;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,SAAS;AAChD;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,iBAAiB;;;;;;;;;;ACjFhC;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,aAAa;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,KAAK;AACL;;;;;;;;;;;;ACxDA;;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;ACNA;AAC0B;AAC1B;AACA;AACoD;AACL;AACE;AACjD,mBAAO,CAAC,8FAAiC;AACzC,mBAAO,CAAC,sFAA6B;AACrC;AACA,+BAA+B,0DAAiB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,aAAa;AACvC;AACA,6BAA6B,KAAK,IAAI,KAAK,IAAI,QAAQ;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,sDAAoB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,uDAAqB;AAC/D,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,6CAA6C,MAAM;AACnD,cAAc;AACd,4CAA4C,MAAM;AAClD;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,MAAM;AACnD,cAAc;AACd,4CAA4C,MAAM;AAClD;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,UAAU;AACvD,SAAS;AACT;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,uDAAqB;AAC3D,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,WAAW;AACrC,6BAA6B,UAAU;AACvC,6BAA6B,SAAS;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,iBAAiB;AAC7C;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,gBAAgB;AACrC,qBAAqB,gBAAgB;AACrC,yBAAyB,oBAAoB;AAC7C;AACA;AACA,gDAAgD,gBAAgB;AAChE,cAAc;AACd,+CAA+C,gBAAgB;AAC/D;AACA;AACA;AACA,+CAA+C,gBAAgB;AAC/D,cAAc;AACd,8CAA8C,gBAAgB;AAC9D;AACA;AACA,8CAA8C,oBAAoB;AAClE;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://cronometro/./frontend/assets/js/darkLightTheme/darkLightTheme.js","webpack://cronometro/./frontend/assets/js/model/Lap.js","webpack://cronometro/./frontend/assets/js/model/Time.js","webpack://cronometro/./frontend/assets/js/services/services.js","webpack://cronometro/./frontend/assets/js/themesColors/themesColors.js","webpack://cronometro/./frontend/assets/css/style.css?9332","webpack://cronometro/webpack/bootstrap","webpack://cronometro/webpack/runtime/define property getters","webpack://cronometro/webpack/runtime/hasOwnProperty shorthand","webpack://cronometro/webpack/runtime/make namespace object","webpack://cronometro/./frontend/assets/js/script.js"],"sourcesContent":["/*==================== DARK/LIGHT THEME ====================*/\r\nconst themeButton = document.querySelector('.dark-button')\r\nconst darkTheme = 'dark-theme';\r\nconst iconTheme = 'bxs-sun';\r\n\r\n// Previously selected topic (if user selected)\r\nconst selectedTheme = localStorage.getItem('selected-theme');\r\nconst selectedIcon = localStorage.getItem('selected-icon');\r\n\r\n// We obtain the current theme that the interface has by validating the dark-theme class\r\nconst getCurrentTheme = () => document.body.classList.contains(darkTheme) ? 'dark' : 'light'\r\nconst getCurrentIcon = () => themeButton.classList.contains(iconTheme) ? 'bxs-moon' : 'bxs-sun'\r\n\r\n// We validate if the user previously chose a topic\r\nif (selectedTheme) {\r\n  // If the validation is fulfilled, we ask what the issue was to know if we activated or deactivated the dark\r\n  document.body.classList[selectedTheme === 'dark' ? 'add' : 'remove'](darkTheme)\r\n  themeButton.classList[selectedIcon === 'bxs-moon' ? 'add' : 'remove'](iconTheme)\r\n}\r\n\r\n// Activate / deactivate the theme manually with the button\r\nthemeButton.addEventListener('click', e => {\r\n    // Add or remove the dark / icon theme\r\n    document.body.classList.toggle(darkTheme)\r\n    themeButton.classList.toggle(iconTheme)\r\n    // We save the theme and the current icon that the user chose\r\n    localStorage.setItem('selected-theme', getCurrentTheme())\r\n    localStorage.setItem('selected-icon', getCurrentIcon())\r\n})\r\n","const LapObjectConstructor = (number, label, min, sec, miliSec) => {\r\n  const lap = {\r\n      \"number\": number,\r\n      \"label\": label,\r\n      \"time\": `${min} : ${sec} : ${miliSec}`\r\n  }\r\n\r\n  return lap\r\n}\r\n\r\nexport default LapObjectConstructor;\r\n","const TimeObjectConstructor = (minutes, seconds, miliseconds) => {\r\n  const time = {\r\n      \"minutes\": minutes,\r\n      \"seconds\": seconds,\r\n      \"miliseconds\": miliseconds\r\n  }\r\n\r\n  return time\r\n}\r\n\r\nexport default TimeObjectConstructor;","//Class that contains all the fetch requets, GET, PUT, DELETE and POST\r\nclass CronometerService {\r\n    constructor() {\r\n        this.URl = `http://localhost:${process.env.PORT}/api`;\r\n    }\r\n\r\n    //Fetch GET request, to get all the laps\r\n    async getLaps() {\r\n        try {\r\n            const response = await fetch(`${this.URl}/laps`);    \r\n            const laps = await response.json();\r\n            return laps;\r\n        } catch {\r\n            alert(\"Hubo un Error al Recibir Los Lapsos, Revisa tu Conexion te Internet\");\r\n        }\r\n    }\r\n\r\n    //Fetch POST request, to save one single lap\r\n    async postLap(lap) {\r\n        try {\r\n            const res = await fetch(`${this.URl}/laps`, {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                method: 'POST',\r\n                body: JSON.stringify(lap)\r\n            });\r\n            const data = await res.json();\r\n            console.log(data);\r\n        } catch {\r\n            alert(\"Hubo un Error al Guardar el Lapso de Tiempo, Revisa tu Conexion te Internet\");            \r\n        }\r\n    }\r\n\r\n    //Fetch DELETE request, to delete one single task\r\n    async deleteLaps() {\r\n        try {\r\n            const res = await fetch(`${this.URl}/laps`, {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                method: 'DELETE'\r\n            });\r\n            const data = await res.json();\r\n            console.log(data);\r\n        } catch {\r\n            alert(\"Hubo un Error al Eliminar los Lapsos de Tiempo, Revisa tu Conexion te Internet\");            \r\n\r\n        }\r\n    }\r\n\r\n    //Fetch GET request, to get the time of the Cronometer storaged from the MongoDB Database\r\n    async getTime() {\r\n        try {\r\n            const response = await fetch(`${this.URl}/time`);    \r\n            const time = await response.json();\r\n            return time;\r\n        } catch {\r\n            alert(\"Hubo un Error al Recibir el Tiempo, Revisa tu Conexion te Internet\");\r\n        }\r\n    }\r\n\r\n    //Fetch PUT request, to send the time of the cronometer to the MongoDB Database\r\n    async sendTime(time) {\r\n        try {\r\n            const res = await fetch(`${this.URl}/time`, {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                method: 'PUT',\r\n                body: JSON.stringify(time)\r\n            });\r\n            const data = await res.json();\r\n            console.log(data);\r\n        } catch {\r\n            alert(\"Hubo un Error al Enviar el Tiempo, Revisa tu Conexion te Internet\");            \r\n\r\n        }\r\n    }\r\n}\r\n\r\nexport default CronometerService;","//JS Code que aperece y desaparece el cuadro para cambiar el color del tema del Cronometro\r\nconst botonPalette = document.querySelector(\".palette-button\");\r\nconst themesContainer = document.querySelector(\".theme-colors__container\");\r\n\r\nbotonPalette.addEventListener(\"click\", () => {\r\n    themesContainer.classList.toggle(\"open\");\r\n})\r\n\r\n//Codigo para cambiar el color\r\nconst buttons = document.querySelectorAll(\".btn\");\r\nlet root = document.querySelector(\":root\");\r\n\r\n//Codigo para colocar tema si ya el usuario lo habia seleccionado antes\r\nlet selectedColor = localStorage.getItem(\"color\");\r\nlet selectedTema = localStorage.getItem(\"selectedColor\");\r\n\r\n\r\n//Codigo por si ya el usuario habia escogido un tema, para guardarlo y colocarlo\r\nif(selectedColor) {\r\n    root.style.setProperty(\"--hue-color\", selectedColor);\r\n    document.querySelector(\".active\").classList.remove(\"active\");\r\n    document.getElementById(`${selectedTema}`).classList.add(\"active\");\r\n}\r\n\r\n//Codigo que al seleccionar el boten del tema, cambia el color del Reloj\r\nfor(var button of buttons) {\r\n    button.addEventListener(\"click\", e => {\r\n        let target = e.target;\r\n\r\n        let open = document.querySelector(\".open\");\r\n        if(open) open.classList.remove(\"open\");\r\n\r\n        document.querySelector(\".active\").classList.remove(\"active\");\r\n        target.classList.add(\"active\");\r\n\r\n        let selectColor = target.getAttribute(\"color\");\r\n        console.log(selectColor);\r\n\r\n        if(selectColor == \"blue\") {\r\n            root.style.setProperty(\"--hue-color\", 240);\r\n            localStorage.setItem(\"color\", 240);\r\n            localStorage.setItem(\"selectedColor\", \"blue\");\r\n        } else if (selectColor == \"orange\") {\r\n            root.style.setProperty(\"--hue-color\", 25);\r\n            localStorage.setItem(\"color\", 25);\r\n            localStorage.setItem(\"selectedColor\", \"orange\");\r\n        } else if (selectColor == \"green\") {\r\n            root.style.setProperty(\"--hue-color\", 154);\r\n            localStorage.setItem(\"color\", 154);\r\n            localStorage.setItem(\"selectedColor\", \"green\");\r\n        } else if (selectColor == \"pink\") {\r\n            root.style.setProperty(\"--hue-color\", 335);\r\n            localStorage.setItem(\"color\", 335);\r\n            localStorage.setItem(\"selectedColor\", \"pink\");\r\n        }\r\n    })\r\n}","// extracted by mini-css-extract-plugin\nexport {};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","//CSS Style\r\nimport \"../css/style.css\";\r\n\r\n//Importing JavaScript Code\r\nimport CronometerService from \"./services/services\";\r\nimport LapObjectConstructor from \"./model/Lap\";\r\nimport TimeObjectConstructor from \"./model/Time\";\r\nrequire(\"./darkLightTheme/darkLightTheme\");\r\nrequire(\"./themesColors/themesColors\");\r\n\r\nconst chronometerService = new CronometerService();\r\n\r\n//Query Selector\r\nconst startButton = document.querySelector(\".start-button\");\r\nconst restartButton = document.querySelector(\".restart-button\");\r\nconst lapButton = document.querySelector(\".lap-button\");\r\nconst minutesField = document.querySelector(\".minutes\");\r\nconst secondsField = document.querySelector(\".seconds\");\r\nconst miliSecondsField = document.querySelector(\".miliseconds\");\r\nconst lapsField = document.querySelector(\".laps\");\r\nconst resetButton = document.querySelector(\".countdown__clean-lap-history-button\");\r\nconst footerField = document.querySelector(\"footer\");\r\n\r\n\r\n//Variable que ayuda a indicar si el cronometro esta pausando o corriendo\r\nlet isPlay = false;\r\nlet min = 0;\r\nlet minCounter;\r\nlet sec = 0;\r\nlet secCounter;\r\nlet miliSec = 0;\r\nlet miliSecCounter;\r\nlet lapCounter = 1;\r\n//Funcion que Aparece y Desaparece los Botones de Reinicar y Lap al Presionar el Boton de Start\r\nconst toggleFunction = () => {\r\n    restartButton.classList.toggle(\"open-start\");\r\n    lapButton.classList.toggle(\"open-start\");\r\n}\r\n\r\n\r\n//Funcion que guardar el tiempo del cronometro y lo agrega a la lista del Lap\r\nconst lapGenerator = async () => {\r\n    const li = document.createElement(\"li\");\r\n    const number = document.createElement(\"span\");\r\n    const lapPhrase = document.createElement(\"span\");\r\n    const timeStamp = document.createElement(\"span\");\r\n\r\n    li.setAttribute(\"class\", \"lap-historial\");\r\n    number.setAttribute(\"class\", \"lap-number\");\r\n    lapPhrase.setAttribute(\"class\", \"lap-phrase\");\r\n    timeStamp.setAttribute(\"class\", \"lap-timer\");\r\n\r\n    number.innerText = `${lapCounter++}`;\r\n    lapPhrase.innerText = \"Lap\";\r\n    timeStamp.innerText = `${min} : ${sec} : ${miliSec}`;\r\n\r\n    li.append(number, lapPhrase, timeStamp);\r\n    lapsField.append(li);\r\n\r\n    resetButton.classList.add(\"open-start\");\r\n    footerField.classList.add(\"show\");\r\n\r\n    let currentLapCounter = lapCounter - 1;\r\n\r\n    await chronometerService.postLap(LapObjectConstructor(currentLapCounter, \"Lap\", min, sec, miliSec));\r\n\r\n}\r\n\r\n//Funcion que arranca el reloj, en donde los minutos, segundos y milisegundos empiezan a moverse\r\nstartButton.addEventListener(\"click\", async () => {\r\n    if (isPlay) {\r\n        document.querySelector(\".start-button h2\").innerText = \"Empezar\";\r\n        toggleFunction();\r\n        clearInterval(minCounter);\r\n        clearInterval(secCounter);\r\n        clearInterval(miliSecCounter);\r\n        isPlay = false;\r\n        await chronometerService.sendTime(TimeObjectConstructor(min, sec, miliSec));\r\n    } else {\r\n        document.querySelector(\".start-button h2\").innerText = \"Pausar\";\r\n        toggleFunction();\r\n\r\n        minCounter = setInterval(() => {\r\n            if (min <= 9) {\r\n                minutesField.innerText = `0${++min}`;\r\n            } else {\r\n                minutesField.innerText = `${++min}`;\r\n            }\r\n            \r\n        }, 60000)\r\n\r\n        secCounter = setInterval(() => {\r\n            if (sec == 59) {\r\n                sec = 0;\r\n            }\r\n\r\n            if (sec < 9) {\r\n                secondsField.innerText = `0${++sec}`;\r\n            } else {\r\n                secondsField.innerText = `${++sec}`;\r\n            }\r\n        }, 1000)\r\n\r\n\r\n        miliSecCounter = setInterval(() => {\r\n            if (miliSec >= 1000) {\r\n                miliSec = 0;\r\n            }\r\n            let ahora = new Date();\r\n            miliSec = ahora.getMilliseconds();\r\n            miliSecondsField.innerText = ` ${++miliSec}`;\r\n        }, 10)\r\n\r\n        isPlay = true;\r\n    }\r\n})\r\n\r\n//Funcion que resetea el cronometro, colocando los minutos, segundos y milisegundos en su valor por default, *00*\r\nrestartButton.addEventListener(\"click\", async () => {\r\n    if (isPlay) {\r\n        document.querySelector(\".start-button h2\").innerText = \"Empezar\";\r\n        isPlay = false;\r\n    }\r\n    restartButton.classList.remove(\"open-start\");\r\n    lapButton.classList.remove(\"open-start\");\r\n\r\n    min = 0;\r\n    sec = 0;\r\n    miliSec = 0;\r\n\r\n    clearInterval(minCounter);\r\n    clearInterval(secCounter);\r\n    clearInterval(miliSecCounter);\r\n\r\n    minutesField.innerText = \"00\"\r\n    secondsField.innerText = \"00\";\r\n    miliSecondsField.innerText = \"00\";\r\n\r\n    await chronometerService.sendTime(TimeObjectConstructor(\"0\", \"0\", \"00\"));\r\n})\r\n\r\n//Al hacer click en el Lap Button, agrega el tiempo del cronometro a la lista de Laps\r\nlapButton.addEventListener(\"click\", lapGenerator);\r\n\r\n//Al hacer click en el boton de Borrar, se borran los laps de la lista\r\nresetButton.addEventListener(\"click\", async () => {\r\n    lapsField.innerHTML = \"\";\r\n    resetButton.classList.remove(\"open-start\");\r\n    lapCounter = 1;\r\n    footerField.classList.remove(\"show\");\r\n\r\n    await chronometerService.deleteLaps();\r\n})\r\n\r\n\r\n//Funcion que guardar el tiempo del cronometro y lo agrega a la lista del Lap\r\nconst lapConstructorFromDataBase = async (lap) => {\r\n    const li = document.createElement(\"li\");\r\n    const number = document.createElement(\"span\");\r\n    const lapPhrase = document.createElement(\"span\");\r\n    const timeStamp = document.createElement(\"span\");\r\n\r\n    li.setAttribute(\"class\", \"lap-historial\");\r\n    number.setAttribute(\"class\", \"lap-number\");\r\n    lapPhrase.setAttribute(\"class\", \"lap-phrase\");\r\n    timeStamp.setAttribute(\"class\", \"lap-timer\");\r\n\r\n    number.innerText = `${lap.number}`;\r\n    lapPhrase.innerText = `${lap.label}`;\r\n    timeStamp.innerText = `${lap.time}`;\r\n\r\n    li.append(number, lapPhrase, timeStamp);\r\n    lapsField.append(li);\r\n\r\n    resetButton.classList.add(\"open-start\");\r\n    footerField.classList.add(\"show\");\r\n\r\n    lapCounter++\r\n}\r\n\r\n//Function that receive all the laps that are stored on the MongoDB Database\r\nconst generateLapsFromTheDatabase = async () => {\r\n    try {\r\n        //Fetch that return all the laps storage from the MongoDB Database\r\n        let laps = await chronometerService.getLaps();\r\n        if (laps.length > 0) {\r\n\r\n            for (let i = 0; i < laps.length; i++) {\r\n                lapConstructorFromDataBase(laps[i]);\r\n            }\r\n\r\n        } else {\r\n            console.log(\"No hay ningun Lap guardada en la Base de Datos\");\r\n        }\r\n\r\n    } catch {\r\n        alert(\"Hubo un Error al Recibir los Laps, Revisa tu Conexion de Internet\");\r\n    }\r\n}\r\n\r\nconst setChronometerTimeFromDataBase = async () => {\r\n    try {\r\n        //Fetch that return the chronometer time storage from the MongoDB Database\r\n        let time = await chronometerService.getTime();\r\n        if (time.length > 0) {\r\n            min = `${time[0].minutes}`;\r\n            sec = `${time[0].seconds}`;\r\n            miliSec = `${time[0].miliseconds}`;\r\n\r\n            if (time[0].minutes <= 9) {\r\n                minutesField.textContent  = `0${time[0].minutes}`;\r\n            } else {\r\n                minutesField.textContent  = `${time[0].minutes}`;\r\n            }\r\n\r\n            if (time[0].seconds <= 9) {\r\n                secondsField.textContent = `0${time[0].seconds}`;\r\n            } else {\r\n                secondsField.textContent = `${time[0].seconds}`;\r\n            }\r\n\r\n            miliSecondsField.textContent = `${time[0].miliseconds}`;\r\n\r\n\r\n        } else {\r\n            console.log(\"No hay ningun Tiempo guardada en la Base de Datos\");\r\n        }\r\n\r\n    } catch {\r\n        alert(\"Hubo un Error al Recibir el Tiempo, Revisa tu Conexion de Internet\");\r\n    }\r\n}\r\n\r\n//Functions that set the laps and the chronometer time from the MongoDB Database\r\ngenerateLapsFromTheDatabase();\r\nsetChronometerTimeFromDataBase();\r\n\r\n\r\n//Query Selector\r\nconst container = document.querySelector(\".container\");\r\nconst spinner = document.querySelector(\".div-spinner-container\");\r\n\r\nconst showCronometerApp = () => {\r\n    container.style.display = \"block\";\r\n    spinner.style.display = \"none\";\r\n}\r\n\r\nconst animationTime = 3000;\r\n\r\n//setTimeout that after 3 seconds, the css loader animation disappear and it shows the app-todo ui\r\nsetTimeout(showCronometerApp, animationTime);\r\n\r\n"],"names":[],"sourceRoot":""}